// Code generated by protoc-gen-go. DO NOT EDIT.
// source: in.proto

/*
Package inrpc is a generated protocol buffer package.

It is generated from these files:
	in.proto

It has these top-level messages:
	Msg
	StatusCode
*/
package inrpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Msg struct {
	Topic     string `protobuf:"bytes,1,opt,name=topic" json:"topic,omitempty"`
	Offset    int64  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Alivetime string `protobuf:"bytes,3,opt,name=alivetime" json:"alivetime,omitempty"`
	Body      string `protobuf:"bytes,4,opt,name=body" json:"body,omitempty"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Msg) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Msg) GetOffset() int64 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *Msg) GetAlivetime() string {
	if m != nil {
		return m.Alivetime
	}
	return ""
}

func (m *Msg) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

type StatusCode struct {
	Sum int32 `protobuf:"varint,1,opt,name=sum" json:"sum,omitempty"`
}

func (m *StatusCode) Reset()                    { *m = StatusCode{} }
func (m *StatusCode) String() string            { return proto.CompactTextString(m) }
func (*StatusCode) ProtoMessage()               {}
func (*StatusCode) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *StatusCode) GetSum() int32 {
	if m != nil {
		return m.Sum
	}
	return 0
}

func init() {
	proto.RegisterType((*Msg)(nil), "inrpc.Msg")
	proto.RegisterType((*StatusCode)(nil), "inrpc.StatusCode")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for In service

type InClient interface {
	SyncMsg(ctx context.Context, opts ...grpc.CallOption) (In_SyncMsgClient, error)
}

type inClient struct {
	cc *grpc.ClientConn
}

func NewInClient(cc *grpc.ClientConn) InClient {
	return &inClient{cc}
}

func (c *inClient) SyncMsg(ctx context.Context, opts ...grpc.CallOption) (In_SyncMsgClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_In_serviceDesc.Streams[0], c.cc, "/inrpc.In/SyncMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &inSyncMsgClient{stream}
	return x, nil
}

type In_SyncMsgClient interface {
	Send(*Msg) error
	CloseAndRecv() (*StatusCode, error)
	grpc.ClientStream
}

type inSyncMsgClient struct {
	grpc.ClientStream
}

func (x *inSyncMsgClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *inSyncMsgClient) CloseAndRecv() (*StatusCode, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StatusCode)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for In service

type InServer interface {
	SyncMsg(In_SyncMsgServer) error
}

func RegisterInServer(s *grpc.Server, srv InServer) {
	s.RegisterService(&_In_serviceDesc, srv)
}

func _In_SyncMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(InServer).SyncMsg(&inSyncMsgServer{stream})
}

type In_SyncMsgServer interface {
	SendAndClose(*StatusCode) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type inSyncMsgServer struct {
	grpc.ServerStream
}

func (x *inSyncMsgServer) SendAndClose(m *StatusCode) error {
	return x.ServerStream.SendMsg(m)
}

func (x *inSyncMsgServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _In_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inrpc.In",
	HandlerType: (*InServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SyncMsg",
			Handler:       _In_SyncMsg_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "in.proto",
}

func init() { proto.RegisterFile("in.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x44, 0x8f, 0xcf, 0x0a, 0x82, 0x40,
	0x10, 0x87, 0x5b, 0x57, 0x2d, 0xe7, 0x54, 0x43, 0xc4, 0x12, 0x11, 0xe2, 0xc9, 0x43, 0x78, 0xb0,
	0x47, 0xe8, 0xd4, 0xc1, 0x8b, 0x3e, 0x81, 0x7f, 0x56, 0x59, 0xc8, 0x5d, 0x71, 0xd7, 0xc0, 0xb7,
	0x0f, 0x37, 0xc1, 0xdb, 0xf7, 0x9b, 0x61, 0x66, 0xbe, 0x81, 0x83, 0x90, 0xc9, 0x30, 0x2a, 0xa3,
	0xd0, 0x13, 0x72, 0x1c, 0xea, 0x88, 0x03, 0xcd, 0x74, 0x87, 0x67, 0xf0, 0x8c, 0x1a, 0x44, 0xcd,
	0x48, 0x48, 0xe2, 0x20, 0xff, 0x07, 0xbc, 0x80, 0xaf, 0xda, 0x56, 0x73, 0xc3, 0x9c, 0x90, 0xc4,
	0x34, 0x5f, 0x13, 0xde, 0x20, 0x28, 0x3f, 0xe2, 0xcb, 0x8d, 0xe8, 0x39, 0xa3, 0x76, 0x62, 0x2b,
	0x20, 0x82, 0x5b, 0xa9, 0x66, 0x66, 0xae, 0x6d, 0x58, 0x8e, 0xee, 0x00, 0x85, 0x29, 0xcd, 0xa4,
	0x5f, 0xaa, 0xe1, 0x78, 0x04, 0xaa, 0xa7, 0xde, 0xde, 0xf2, 0xf2, 0x05, 0xd3, 0x14, 0x9c, 0xb7,
	0xc4, 0x07, 0xec, 0x8b, 0x59, 0xd6, 0x8b, 0x10, 0x24, 0xd6, 0x2f, 0xc9, 0x74, 0x77, 0x3d, 0xad,
	0xbc, 0x6d, 0x88, 0x76, 0x31, 0xa9, 0x7c, 0xfb, 0xc8, 0xf3, 0x17, 0x00, 0x00, 0xff, 0xff, 0x51,
	0xe3, 0xe1, 0x6d, 0xd4, 0x00, 0x00, 0x00,
}
